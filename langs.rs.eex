// DO NOT EDIT THIS FILE
// Auto generated by `mix gen.langs.rs`
// <%= to_string(DateTime.utc_now()) %>

use crate::constants::HIGHLIGHT_NAMES;
use crate::download_query;
use std::sync::LazyLock;
use tree_sitter::Language;
use tree_sitter_highlight::HighlightConfiguration;

extern "C" {
    <%= for fun <- @tree_sitter_functions do %>fn <%= fun %>() -> Language;
    <% end %>
}

pub fn langs() -> Vec<&'static str> {
    vec![
      <%= for lang <- @langs do %>"<%= lang.name %>",
      <% end %>
    ]
}

pub fn lang_name(lang: &str) -> String {
    config(lang).language_name.clone()
}

pub fn grammar(lang: &str) -> Option<Language> {
    match lang {<%= for lang <- @langs do %>
      "<%= lang.name %>" => unsafe { Some(<%= lang.tree_sitter_fun %>()) },<% end %>
      _ => None,
    }
}

// extracted from each lang package.json
pub fn config(lang: &str) -> &'static HighlightConfiguration {
    match lang {
    <%= for {filetype, config} <- @filetypes do %>"<%= filetype %>" => <%= config %>,
    <% end %>
    _ => &PLAINTEXT_CONFIG,
    }
}
 
<%= for lang <- @langs do %>
static <%= lang.config_name %>: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { <%= lang.tree_sitter_fun %>() },
        "<%= lang.name %>",
        <%= lang.highlights %>,
        <%= lang.injections %>,
        <%= lang.locals %>,
    )
    .expect("failed to create <%= lang.name %> highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});
<% end %>

#[cfg(test)]
mod tests {
    use super::*;
    <%= for lang <- @langs do %>
    #[test]
    fn <%= lang.test_name %>() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &<%= lang.tree_sitter_fun %>() })
            .expect("failed to set language <%= lang.name %>");
        parser.parse(b"test", None).expect("failed to parse <%= lang.name %>");
    }
    <% end %>
}
