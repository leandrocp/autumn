// DO NOT EDIT THIS FILE
// Generated automatically by mix task `Mix.Tasks.Autumn.GenerateThemes`

use once_cell::sync::Lazy;
use toml::Value;

static ACME: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/acme.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "acme.toml"))
});

static ADWAITA_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/adwaita_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "adwaita_dark.toml"))
});

static AMBERWOOD: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/amberwood.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "amberwood.toml"))
});

static AUTUMN: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/autumn.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "autumn.toml"))
});

static AUTUMN_NIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/autumn_night.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "autumn_night.toml"))
});

static AYU_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/ayu_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "ayu_dark.toml"))
});

static AYU_EVOLVE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/ayu_evolve.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "ayu_evolve.toml"))
});

static AYU_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/ayu_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "ayu_light.toml"))
});

static AYU_MIRAGE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/ayu_mirage.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "ayu_mirage.toml"))
});

static BASE16_DEFAULT_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/base16_default_dark.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "base16_default_dark.toml"))
});

static BASE16_DEFAULT_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/base16_default_light.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "base16_default_light.toml"))
});

static BASE16_TERMINAL: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/base16_terminal.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "base16_terminal.toml"))
});

static BASE16_TRANSPARENT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/base16_transparent.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "base16_transparent.toml"))
});

static BOGSTER: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/bogster.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "bogster.toml"))
});

static BOGSTER_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/bogster_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "bogster_light.toml"))
});

static BOO_BERRY: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/boo_berry.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "boo_berry.toml"))
});

static CATPPUCCIN_FRAPPE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/catppuccin_frappe.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "catppuccin_frappe.toml"))
});

static CATPPUCCIN_LATTE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/catppuccin_latte.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "catppuccin_latte.toml"))
});

static CATPPUCCIN_MACCHIATO: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/catppuccin_macchiato.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "catppuccin_macchiato.toml"))
});

static CATPPUCCIN_MOCHA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/catppuccin_mocha.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "catppuccin_mocha.toml"))
});

static CYAN_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/cyan_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "cyan_light.toml"))
});

static DARCULA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/darcula.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "darcula.toml"))
});

static DARCULA_SOLID: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/darcula_solid.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "darcula_solid.toml"))
});

static DARK_HIGH_CONTRAST: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/dark_high_contrast.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "dark_high_contrast.toml"))
});

static DARK_PLUS: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/dark_plus.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "dark_plus.toml"))
});

static DOOM_ACARIO_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/doom_acario_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "doom_acario_dark.toml"))
});

static DRACULA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/dracula.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "dracula.toml"))
});

static DRACULA_AT_NIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/dracula_at_night.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "dracula_at_night.toml"))
});

static EMACS: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/emacs.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "emacs.toml"))
});

static EVERBLUSH: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/everblush.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "everblush.toml"))
});

static EVERFOREST_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/everforest_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "everforest_dark.toml"))
});

static EVERFOREST_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/everforest_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "everforest_light.toml"))
});

static FERRA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/ferra.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "ferra.toml"))
});

static FLATWHITE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/flatwhite.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "flatwhite.toml"))
});

static FLEET_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/fleet_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "fleet_dark.toml"))
});

static GITHUB_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "github_dark.toml"))
});

static GITHUB_DARK_COLORBLIND: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_dark_colorblind.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_dark_colorblind.toml"))
});

static GITHUB_DARK_DIMMED: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_dark_dimmed.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_dark_dimmed.toml"))
});

static GITHUB_DARK_HIGH_CONTRAST: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_dark_high_contrast.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_dark_high_contrast.toml"))
});

static GITHUB_DARK_TRITANOPIA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_dark_tritanopia.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_dark_tritanopia.toml"))
});

static GITHUB_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "github_light.toml"))
});

static GITHUB_LIGHT_COLORBLIND: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_light_colorblind.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_light_colorblind.toml"))
});

static GITHUB_LIGHT_HIGH_CONTRAST: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_light_high_contrast.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_light_high_contrast.toml"))
});

static GITHUB_LIGHT_TRITANOPIA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/github_light_tritanopia.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "github_light_tritanopia.toml"))
});

static GRUVBOX: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/gruvbox.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "gruvbox.toml"))
});

static GRUVBOX_DARK_HARD: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/gruvbox_dark_hard.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "gruvbox_dark_hard.toml"))
});

static GRUVBOX_DARK_SOFT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/gruvbox_dark_soft.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "gruvbox_dark_soft.toml"))
});

static GRUVBOX_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/gruvbox_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "gruvbox_light.toml"))
});

static HEISENBERG: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/heisenberg.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "heisenberg.toml"))
});

static HEX_LAVENDER: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/hex_lavender.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "hex_lavender.toml"))
});

static HEX_STEEL: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/hex_steel.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "hex_steel.toml"))
});

static HEX_TOXIC: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/hex_toxic.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "hex_toxic.toml"))
});

static INGRID: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/ingrid.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "ingrid.toml"))
});

static JELLYBEANS: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/jellybeans.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "jellybeans.toml"))
});

static KANAGAWA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/kanagawa.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "kanagawa.toml"))
});

static KAOLIN_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/kaolin_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "kaolin_dark.toml"))
});

static KAOLIN_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/kaolin_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "kaolin_light.toml"))
});

static KAOLIN_VALLEY_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/kaolin_valley_dark.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "kaolin_valley_dark.toml"))
});

static MATERIAL_DARKER: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/material_darker.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "material_darker.toml"))
});

static MATERIAL_DEEP_OCEAN: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/material_deep_ocean.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "material_deep_ocean.toml"))
});

static MATERIAL_OCEANIC: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/material_oceanic.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "material_oceanic.toml"))
});

static MATERIAL_PALENIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/material_palenight.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "material_palenight.toml"))
});

static MELIORA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/meliora.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "meliora.toml"))
});

static MELLOW: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/mellow.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "mellow.toml"))
});

static MERIONETTE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/merionette.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "merionette.toml"))
});

static MOLOKAI: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/molokai.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "molokai.toml"))
});

static MONOKAI: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "monokai.toml"))
});

static MONOKAI_AQUA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai_aqua.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "monokai_aqua.toml"))
});

static MONOKAI_PRO: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai_pro.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "monokai_pro.toml"))
});

static MONOKAI_PRO_MACHINE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai_pro_machine.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "monokai_pro_machine.toml"))
});

static MONOKAI_PRO_OCTAGON: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai_pro_octagon.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "monokai_pro_octagon.toml"))
});

static MONOKAI_PRO_RISTRETTO: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai_pro_ristretto.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "monokai_pro_ristretto.toml"))
});

static MONOKAI_PRO_SPECTRUM: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/monokai_pro_spectrum.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "monokai_pro_spectrum.toml"))
});

static NAYSAYER: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/naysayer.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "naysayer.toml"))
});

static NEW_MOON: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/new_moon.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "new_moon.toml"))
});

static NIGHT_OWL: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/night_owl.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "night_owl.toml"))
});

static NIGHTFOX: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/nightfox.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "nightfox.toml"))
});

static NOCTIS: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/noctis.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "noctis.toml"))
});

static NOCTIS_BORDO: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/noctis_bordo.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "noctis_bordo.toml"))
});

static NORD: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/nord.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "nord.toml"))
});

static NORD_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/nord_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "nord_light.toml"))
});

static ONEDARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/onedark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "onedark.toml"))
});

static ONEDARKER: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/onedarker.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "onedarker.toml"))
});

static ONELIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/onelight.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "onelight.toml"))
});

static PAPERCOLOR_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/papercolor_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "papercolor_dark.toml"))
});

static PAPERCOLOR_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/papercolor_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "papercolor_light.toml"))
});

static PENUMBRA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/penumbra.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "penumbra.toml"))
});

static POP_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/pop_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "pop_dark.toml"))
});

static RASMUS: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/rasmus.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "rasmus.toml"))
});

static ROSE_PINE: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/rose_pine.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "rose_pine.toml"))
});

static ROSE_PINE_DAWN: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/rose_pine_dawn.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "rose_pine_dawn.toml"))
});

static ROSE_PINE_MOON: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/rose_pine_moon.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "rose_pine_moon.toml"))
});

static SERIKA_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/serika_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "serika_dark.toml"))
});

static SERIKA_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/serika_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "serika_light.toml"))
});

static SNAZZY: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/snazzy.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "snazzy.toml"))
});

static SOLARIZED_DARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/solarized_dark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "solarized_dark.toml"))
});

static SOLARIZED_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/solarized_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "solarized_light.toml"))
});

static SONOKAI: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/sonokai.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "sonokai.toml"))
});

static SPACEBONES_LIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/spacebones_light.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "spacebones_light.toml"))
});

static TOKYONIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/tokyonight.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "tokyonight.toml"))
});

static TOKYONIGHT_STORM: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/tokyonight_storm.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "tokyonight_storm.toml"))
});

static VARUA: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/varua.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "varua.toml"))
});

static VIM_DARK_HIGH_CONTRAST: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/vim_dark_high_contrast.toml");
    toml::from_str(theme)
        .unwrap_or_else(|_| panic!("failed to parse {}", "vim_dark_high_contrast.toml"))
});

static YELLOWED: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/yellowed.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "yellowed.toml"))
});

static ZED_ONEDARK: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/zed_onedark.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "zed_onedark.toml"))
});

static ZED_ONELIGHT: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/zed_onelight.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "zed_onelight.toml"))
});

static ZENBURN: Lazy<Value> = Lazy::new(|| {
    let theme = include_str!("../../../priv/generated/themes/zenburn.toml");
    toml::from_str(theme).unwrap_or_else(|_| panic!("failed to parse {}", "zenburn.toml"))
});

pub fn theme(name: &str) -> Option<&Value> {
    match name {
        "acme" => Some(&ACME),

        "adwaita_dark" => Some(&ADWAITA_DARK),

        "amberwood" => Some(&AMBERWOOD),

        "autumn" => Some(&AUTUMN),

        "autumn_night" => Some(&AUTUMN_NIGHT),

        "ayu_dark" => Some(&AYU_DARK),

        "ayu_evolve" => Some(&AYU_EVOLVE),

        "ayu_light" => Some(&AYU_LIGHT),

        "ayu_mirage" => Some(&AYU_MIRAGE),

        "base16_default_dark" => Some(&BASE16_DEFAULT_DARK),

        "base16_default_light" => Some(&BASE16_DEFAULT_LIGHT),

        "base16_terminal" => Some(&BASE16_TERMINAL),

        "base16_transparent" => Some(&BASE16_TRANSPARENT),

        "bogster" => Some(&BOGSTER),

        "bogster_light" => Some(&BOGSTER_LIGHT),

        "boo_berry" => Some(&BOO_BERRY),

        "catppuccin_frappe" => Some(&CATPPUCCIN_FRAPPE),

        "catppuccin_latte" => Some(&CATPPUCCIN_LATTE),

        "catppuccin_macchiato" => Some(&CATPPUCCIN_MACCHIATO),

        "catppuccin_mocha" => Some(&CATPPUCCIN_MOCHA),

        "cyan_light" => Some(&CYAN_LIGHT),

        "darcula" => Some(&DARCULA),

        "darcula_solid" => Some(&DARCULA_SOLID),

        "dark_high_contrast" => Some(&DARK_HIGH_CONTRAST),

        "dark_plus" => Some(&DARK_PLUS),

        "doom_acario_dark" => Some(&DOOM_ACARIO_DARK),

        "dracula" => Some(&DRACULA),

        "dracula_at_night" => Some(&DRACULA_AT_NIGHT),

        "emacs" => Some(&EMACS),

        "everblush" => Some(&EVERBLUSH),

        "everforest_dark" => Some(&EVERFOREST_DARK),

        "everforest_light" => Some(&EVERFOREST_LIGHT),

        "ferra" => Some(&FERRA),

        "flatwhite" => Some(&FLATWHITE),

        "fleet_dark" => Some(&FLEET_DARK),

        "github_dark" => Some(&GITHUB_DARK),

        "github_dark_colorblind" => Some(&GITHUB_DARK_COLORBLIND),

        "github_dark_dimmed" => Some(&GITHUB_DARK_DIMMED),

        "github_dark_high_contrast" => Some(&GITHUB_DARK_HIGH_CONTRAST),

        "github_dark_tritanopia" => Some(&GITHUB_DARK_TRITANOPIA),

        "github_light" => Some(&GITHUB_LIGHT),

        "github_light_colorblind" => Some(&GITHUB_LIGHT_COLORBLIND),

        "github_light_high_contrast" => Some(&GITHUB_LIGHT_HIGH_CONTRAST),

        "github_light_tritanopia" => Some(&GITHUB_LIGHT_TRITANOPIA),

        "gruvbox" => Some(&GRUVBOX),

        "gruvbox_dark_hard" => Some(&GRUVBOX_DARK_HARD),

        "gruvbox_dark_soft" => Some(&GRUVBOX_DARK_SOFT),

        "gruvbox_light" => Some(&GRUVBOX_LIGHT),

        "heisenberg" => Some(&HEISENBERG),

        "hex_lavender" => Some(&HEX_LAVENDER),

        "hex_steel" => Some(&HEX_STEEL),

        "hex_toxic" => Some(&HEX_TOXIC),

        "ingrid" => Some(&INGRID),

        "jellybeans" => Some(&JELLYBEANS),

        "kanagawa" => Some(&KANAGAWA),

        "kaolin_dark" => Some(&KAOLIN_DARK),

        "kaolin_light" => Some(&KAOLIN_LIGHT),

        "kaolin_valley_dark" => Some(&KAOLIN_VALLEY_DARK),

        "material_darker" => Some(&MATERIAL_DARKER),

        "material_deep_ocean" => Some(&MATERIAL_DEEP_OCEAN),

        "material_oceanic" => Some(&MATERIAL_OCEANIC),

        "material_palenight" => Some(&MATERIAL_PALENIGHT),

        "meliora" => Some(&MELIORA),

        "mellow" => Some(&MELLOW),

        "merionette" => Some(&MERIONETTE),

        "molokai" => Some(&MOLOKAI),

        "monokai" => Some(&MONOKAI),

        "monokai_aqua" => Some(&MONOKAI_AQUA),

        "monokai_pro" => Some(&MONOKAI_PRO),

        "monokai_pro_machine" => Some(&MONOKAI_PRO_MACHINE),

        "monokai_pro_octagon" => Some(&MONOKAI_PRO_OCTAGON),

        "monokai_pro_ristretto" => Some(&MONOKAI_PRO_RISTRETTO),

        "monokai_pro_spectrum" => Some(&MONOKAI_PRO_SPECTRUM),

        "naysayer" => Some(&NAYSAYER),

        "new_moon" => Some(&NEW_MOON),

        "night_owl" => Some(&NIGHT_OWL),

        "nightfox" => Some(&NIGHTFOX),

        "noctis" => Some(&NOCTIS),

        "noctis_bordo" => Some(&NOCTIS_BORDO),

        "nord" => Some(&NORD),

        "nord_light" => Some(&NORD_LIGHT),

        "onedark" => Some(&ONEDARK),

        "onedarker" => Some(&ONEDARKER),

        "onelight" => Some(&ONELIGHT),

        "papercolor_dark" => Some(&PAPERCOLOR_DARK),

        "papercolor_light" => Some(&PAPERCOLOR_LIGHT),

        "penumbra" => Some(&PENUMBRA),

        "pop_dark" => Some(&POP_DARK),

        "rasmus" => Some(&RASMUS),

        "rose_pine" => Some(&ROSE_PINE),

        "rose_pine_dawn" => Some(&ROSE_PINE_DAWN),

        "rose_pine_moon" => Some(&ROSE_PINE_MOON),

        "serika_dark" => Some(&SERIKA_DARK),

        "serika_light" => Some(&SERIKA_LIGHT),

        "snazzy" => Some(&SNAZZY),

        "solarized_dark" => Some(&SOLARIZED_DARK),

        "solarized_light" => Some(&SOLARIZED_LIGHT),

        "sonokai" => Some(&SONOKAI),

        "spacebones_light" => Some(&SPACEBONES_LIGHT),

        "tokyonight" => Some(&TOKYONIGHT),

        "tokyonight_storm" => Some(&TOKYONIGHT_STORM),

        "varua" => Some(&VARUA),

        "vim_dark_high_contrast" => Some(&VIM_DARK_HIGH_CONTRAST),

        "yellowed" => Some(&YELLOWED),

        "zed_onedark" => Some(&ZED_ONEDARK),

        "zed_onelight" => Some(&ZED_ONELIGHT),

        "zenburn" => Some(&ZENBURN),

        &_ => None,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn load_acme() {
        let _theme = theme("acme");
    }

    #[test]
    fn load_adwaita_dark() {
        let _theme = theme("adwaita_dark");
    }

    #[test]
    fn load_amberwood() {
        let _theme = theme("amberwood");
    }

    #[test]
    fn load_autumn() {
        let _theme = theme("autumn");
    }

    #[test]
    fn load_autumn_night() {
        let _theme = theme("autumn_night");
    }

    #[test]
    fn load_ayu_dark() {
        let _theme = theme("ayu_dark");
    }

    #[test]
    fn load_ayu_evolve() {
        let _theme = theme("ayu_evolve");
    }

    #[test]
    fn load_ayu_light() {
        let _theme = theme("ayu_light");
    }

    #[test]
    fn load_ayu_mirage() {
        let _theme = theme("ayu_mirage");
    }

    #[test]
    fn load_base16_default_dark() {
        let _theme = theme("base16_default_dark");
    }

    #[test]
    fn load_base16_default_light() {
        let _theme = theme("base16_default_light");
    }

    #[test]
    fn load_base16_terminal() {
        let _theme = theme("base16_terminal");
    }

    #[test]
    fn load_base16_transparent() {
        let _theme = theme("base16_transparent");
    }

    #[test]
    fn load_bogster() {
        let _theme = theme("bogster");
    }

    #[test]
    fn load_bogster_light() {
        let _theme = theme("bogster_light");
    }

    #[test]
    fn load_boo_berry() {
        let _theme = theme("boo_berry");
    }

    #[test]
    fn load_catppuccin_frappe() {
        let _theme = theme("catppuccin_frappe");
    }

    #[test]
    fn load_catppuccin_latte() {
        let _theme = theme("catppuccin_latte");
    }

    #[test]
    fn load_catppuccin_macchiato() {
        let _theme = theme("catppuccin_macchiato");
    }

    #[test]
    fn load_catppuccin_mocha() {
        let _theme = theme("catppuccin_mocha");
    }

    #[test]
    fn load_cyan_light() {
        let _theme = theme("cyan_light");
    }

    #[test]
    fn load_darcula() {
        let _theme = theme("darcula");
    }

    #[test]
    fn load_darcula_solid() {
        let _theme = theme("darcula_solid");
    }

    #[test]
    fn load_dark_high_contrast() {
        let _theme = theme("dark_high_contrast");
    }

    #[test]
    fn load_dark_plus() {
        let _theme = theme("dark_plus");
    }

    #[test]
    fn load_doom_acario_dark() {
        let _theme = theme("doom_acario_dark");
    }

    #[test]
    fn load_dracula() {
        let _theme = theme("dracula");
    }

    #[test]
    fn load_dracula_at_night() {
        let _theme = theme("dracula_at_night");
    }

    #[test]
    fn load_emacs() {
        let _theme = theme("emacs");
    }

    #[test]
    fn load_everblush() {
        let _theme = theme("everblush");
    }

    #[test]
    fn load_everforest_dark() {
        let _theme = theme("everforest_dark");
    }

    #[test]
    fn load_everforest_light() {
        let _theme = theme("everforest_light");
    }

    #[test]
    fn load_ferra() {
        let _theme = theme("ferra");
    }

    #[test]
    fn load_flatwhite() {
        let _theme = theme("flatwhite");
    }

    #[test]
    fn load_fleet_dark() {
        let _theme = theme("fleet_dark");
    }

    #[test]
    fn load_github_dark() {
        let _theme = theme("github_dark");
    }

    #[test]
    fn load_github_dark_colorblind() {
        let _theme = theme("github_dark_colorblind");
    }

    #[test]
    fn load_github_dark_dimmed() {
        let _theme = theme("github_dark_dimmed");
    }

    #[test]
    fn load_github_dark_high_contrast() {
        let _theme = theme("github_dark_high_contrast");
    }

    #[test]
    fn load_github_dark_tritanopia() {
        let _theme = theme("github_dark_tritanopia");
    }

    #[test]
    fn load_github_light() {
        let _theme = theme("github_light");
    }

    #[test]
    fn load_github_light_colorblind() {
        let _theme = theme("github_light_colorblind");
    }

    #[test]
    fn load_github_light_high_contrast() {
        let _theme = theme("github_light_high_contrast");
    }

    #[test]
    fn load_github_light_tritanopia() {
        let _theme = theme("github_light_tritanopia");
    }

    #[test]
    fn load_gruvbox() {
        let _theme = theme("gruvbox");
    }

    #[test]
    fn load_gruvbox_dark_hard() {
        let _theme = theme("gruvbox_dark_hard");
    }

    #[test]
    fn load_gruvbox_dark_soft() {
        let _theme = theme("gruvbox_dark_soft");
    }

    #[test]
    fn load_gruvbox_light() {
        let _theme = theme("gruvbox_light");
    }

    #[test]
    fn load_heisenberg() {
        let _theme = theme("heisenberg");
    }

    #[test]
    fn load_hex_lavender() {
        let _theme = theme("hex_lavender");
    }

    #[test]
    fn load_hex_steel() {
        let _theme = theme("hex_steel");
    }

    #[test]
    fn load_hex_toxic() {
        let _theme = theme("hex_toxic");
    }

    #[test]
    fn load_ingrid() {
        let _theme = theme("ingrid");
    }

    #[test]
    fn load_jellybeans() {
        let _theme = theme("jellybeans");
    }

    #[test]
    fn load_kanagawa() {
        let _theme = theme("kanagawa");
    }

    #[test]
    fn load_kaolin_dark() {
        let _theme = theme("kaolin_dark");
    }

    #[test]
    fn load_kaolin_light() {
        let _theme = theme("kaolin_light");
    }

    #[test]
    fn load_kaolin_valley_dark() {
        let _theme = theme("kaolin_valley_dark");
    }

    #[test]
    fn load_material_darker() {
        let _theme = theme("material_darker");
    }

    #[test]
    fn load_material_deep_ocean() {
        let _theme = theme("material_deep_ocean");
    }

    #[test]
    fn load_material_oceanic() {
        let _theme = theme("material_oceanic");
    }

    #[test]
    fn load_material_palenight() {
        let _theme = theme("material_palenight");
    }

    #[test]
    fn load_meliora() {
        let _theme = theme("meliora");
    }

    #[test]
    fn load_mellow() {
        let _theme = theme("mellow");
    }

    #[test]
    fn load_merionette() {
        let _theme = theme("merionette");
    }

    #[test]
    fn load_molokai() {
        let _theme = theme("molokai");
    }

    #[test]
    fn load_monokai() {
        let _theme = theme("monokai");
    }

    #[test]
    fn load_monokai_aqua() {
        let _theme = theme("monokai_aqua");
    }

    #[test]
    fn load_monokai_pro() {
        let _theme = theme("monokai_pro");
    }

    #[test]
    fn load_monokai_pro_machine() {
        let _theme = theme("monokai_pro_machine");
    }

    #[test]
    fn load_monokai_pro_octagon() {
        let _theme = theme("monokai_pro_octagon");
    }

    #[test]
    fn load_monokai_pro_ristretto() {
        let _theme = theme("monokai_pro_ristretto");
    }

    #[test]
    fn load_monokai_pro_spectrum() {
        let _theme = theme("monokai_pro_spectrum");
    }

    #[test]
    fn load_naysayer() {
        let _theme = theme("naysayer");
    }

    #[test]
    fn load_new_moon() {
        let _theme = theme("new_moon");
    }

    #[test]
    fn load_night_owl() {
        let _theme = theme("night_owl");
    }

    #[test]
    fn load_nightfox() {
        let _theme = theme("nightfox");
    }

    #[test]
    fn load_noctis() {
        let _theme = theme("noctis");
    }

    #[test]
    fn load_noctis_bordo() {
        let _theme = theme("noctis_bordo");
    }

    #[test]
    fn load_nord() {
        let _theme = theme("nord");
    }

    #[test]
    fn load_nord_light() {
        let _theme = theme("nord_light");
    }

    #[test]
    fn load_onedark() {
        let _theme = theme("onedark");
    }

    #[test]
    fn load_onedarker() {
        let _theme = theme("onedarker");
    }

    #[test]
    fn load_onelight() {
        let _theme = theme("onelight");
    }

    #[test]
    fn load_papercolor_dark() {
        let _theme = theme("papercolor_dark");
    }

    #[test]
    fn load_papercolor_light() {
        let _theme = theme("papercolor_light");
    }

    #[test]
    fn load_penumbra() {
        let _theme = theme("penumbra");
    }

    #[test]
    fn load_pop_dark() {
        let _theme = theme("pop_dark");
    }

    #[test]
    fn load_rasmus() {
        let _theme = theme("rasmus");
    }

    #[test]
    fn load_rose_pine() {
        let _theme = theme("rose_pine");
    }

    #[test]
    fn load_rose_pine_dawn() {
        let _theme = theme("rose_pine_dawn");
    }

    #[test]
    fn load_rose_pine_moon() {
        let _theme = theme("rose_pine_moon");
    }

    #[test]
    fn load_serika_dark() {
        let _theme = theme("serika_dark");
    }

    #[test]
    fn load_serika_light() {
        let _theme = theme("serika_light");
    }

    #[test]
    fn load_snazzy() {
        let _theme = theme("snazzy");
    }

    #[test]
    fn load_solarized_dark() {
        let _theme = theme("solarized_dark");
    }

    #[test]
    fn load_solarized_light() {
        let _theme = theme("solarized_light");
    }

    #[test]
    fn load_sonokai() {
        let _theme = theme("sonokai");
    }

    #[test]
    fn load_spacebones_light() {
        let _theme = theme("spacebones_light");
    }

    #[test]
    fn load_tokyonight() {
        let _theme = theme("tokyonight");
    }

    #[test]
    fn load_tokyonight_storm() {
        let _theme = theme("tokyonight_storm");
    }

    #[test]
    fn load_varua() {
        let _theme = theme("varua");
    }

    #[test]
    fn load_vim_dark_high_contrast() {
        let _theme = theme("vim_dark_high_contrast");
    }

    #[test]
    fn load_yellowed() {
        let _theme = theme("yellowed");
    }

    #[test]
    fn load_zed_onedark() {
        let _theme = theme("zed_onedark");
    }

    #[test]
    fn load_zed_onelight() {
        let _theme = theme("zed_onelight");
    }

    #[test]
    fn load_zenburn() {
        let _theme = theme("zenburn");
    }
}
