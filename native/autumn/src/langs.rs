// DO NOT EDIT THIS FILE
// Auto generated by `mix gen.langs.rs`
// 2025-01-24 14:21:59.473300Z

use crate::constants::HIGHLIGHT_NAMES;
use crate::download_query;
use std::sync::LazyLock;
use tree_sitter::Language;
use tree_sitter_highlight::HighlightConfiguration;

extern "C" {
    fn tree_sitter_bash() -> Language;
    fn tree_sitter_c() -> Language;
    fn tree_sitter_clojure() -> Language;
    fn tree_sitter_cpp() -> Language;
    fn tree_sitter_c_sharp() -> Language;
    fn tree_sitter_css() -> Language;
    fn tree_sitter_diff() -> Language;
    fn tree_sitter_dockerfile() -> Language;
    fn tree_sitter_eex() -> Language;
    fn tree_sitter_elisp() -> Language;
    fn tree_sitter_elixir() -> Language;
    fn tree_sitter_elm() -> Language;
    fn tree_sitter_glimmer() -> Language;
    fn tree_sitter_erlang() -> Language;
    fn tree_sitter_gleam() -> Language;
    fn tree_sitter_go() -> Language;
    fn tree_sitter_haskell() -> Language;
    fn tree_sitter_heex() -> Language;
    fn tree_sitter_html() -> Language;
    fn tree_sitter_iex() -> Language;
    fn tree_sitter_java() -> Language;
    fn tree_sitter_javascript() -> Language;
    fn tree_sitter_jsdoc() -> Language;
    fn tree_sitter_json() -> Language;
    fn tree_sitter_kotlin() -> Language;
    fn tree_sitter_llvm() -> Language;
    fn tree_sitter_lua() -> Language;
    fn tree_sitter_make() -> Language;
    fn tree_sitter_markdown() -> Language;
    fn tree_sitter_markdown_inline() -> Language;
    fn tree_sitter_objc() -> Language;
    fn tree_sitter_php() -> Language;
    fn tree_sitter_proto() -> Language;
    fn tree_sitter_python() -> Language;
    fn tree_sitter_r() -> Language;
    fn tree_sitter_regex() -> Language;
    fn tree_sitter_ruby() -> Language;
    fn tree_sitter_rust() -> Language;
    fn tree_sitter_scala() -> Language;
    fn tree_sitter_sql() -> Language;
    fn tree_sitter_svelte() -> Language;
    fn tree_sitter_swift() -> Language;
    fn tree_sitter_hcl() -> Language;
    fn tree_sitter_toml() -> Language;
    fn tree_sitter_tsx() -> Language;
    fn tree_sitter_vim() -> Language;
    fn tree_sitter_yaml() -> Language;
    fn tree_sitter_zig() -> Language;

}

pub fn langs() -> Vec<&'static str> {
    vec![
        "bash",
        "c",
        "clojure",
        "cpp",
        "csharp",
        "css",
        "diff",
        "dockerfile",
        "eex",
        "elisp",
        "elixir",
        "elm",
        "ember",
        "erlang",
        "gleam",
        "go",
        "haskell",
        "heex",
        "html",
        "iex",
        "java",
        "javascript",
        "jsdoc",
        "json",
        "jsx",
        "kotlin",
        "llvm",
        "lua",
        "make",
        "markdown",
        "markdown_inline",
        "objc",
        "php",
        "plaintext",
        "proto",
        "python",
        "r",
        "regex",
        "ruby",
        "rust",
        "scala",
        "sql",
        "svelte",
        "swift",
        "terraform",
        "toml",
        "typescript",
        "vimscript",
        "yaml",
        "zig",
    ]
}

pub fn lang_name(lang: &str) -> String {
    config(lang).language_name.clone()
}

pub fn grammar(lang: &str) -> Option<Language> {
    match lang {
        "bash" => unsafe { Some(tree_sitter_bash()) },
        "c" => unsafe { Some(tree_sitter_c()) },
        "clojure" => unsafe { Some(tree_sitter_clojure()) },
        "cpp" => unsafe { Some(tree_sitter_cpp()) },
        "csharp" => unsafe { Some(tree_sitter_c_sharp()) },
        "css" => unsafe { Some(tree_sitter_css()) },
        "diff" => unsafe { Some(tree_sitter_diff()) },
        "dockerfile" => unsafe { Some(tree_sitter_dockerfile()) },
        "eex" => unsafe { Some(tree_sitter_eex()) },
        "elisp" => unsafe { Some(tree_sitter_elisp()) },
        "elixir" => unsafe { Some(tree_sitter_elixir()) },
        "elm" => unsafe { Some(tree_sitter_elm()) },
        "ember" => unsafe { Some(tree_sitter_glimmer()) },
        "erlang" => unsafe { Some(tree_sitter_erlang()) },
        "gleam" => unsafe { Some(tree_sitter_gleam()) },
        "go" => unsafe { Some(tree_sitter_go()) },
        "haskell" => unsafe { Some(tree_sitter_haskell()) },
        "heex" => unsafe { Some(tree_sitter_heex()) },
        "html" => unsafe { Some(tree_sitter_html()) },
        "iex" => unsafe { Some(tree_sitter_iex()) },
        "java" => unsafe { Some(tree_sitter_java()) },
        "javascript" => unsafe { Some(tree_sitter_javascript()) },
        "jsdoc" => unsafe { Some(tree_sitter_jsdoc()) },
        "json" => unsafe { Some(tree_sitter_json()) },
        "jsx" => unsafe { Some(tree_sitter_javascript()) },
        "kotlin" => unsafe { Some(tree_sitter_kotlin()) },
        "llvm" => unsafe { Some(tree_sitter_llvm()) },
        "lua" => unsafe { Some(tree_sitter_lua()) },
        "make" => unsafe { Some(tree_sitter_make()) },
        "markdown" => unsafe { Some(tree_sitter_markdown()) },
        "markdown_inline" => unsafe { Some(tree_sitter_markdown_inline()) },
        "objc" => unsafe { Some(tree_sitter_objc()) },
        "php" => unsafe { Some(tree_sitter_php()) },
        "plaintext" => unsafe { Some(tree_sitter_diff()) },
        "proto" => unsafe { Some(tree_sitter_proto()) },
        "python" => unsafe { Some(tree_sitter_python()) },
        "r" => unsafe { Some(tree_sitter_r()) },
        "regex" => unsafe { Some(tree_sitter_regex()) },
        "ruby" => unsafe { Some(tree_sitter_ruby()) },
        "rust" => unsafe { Some(tree_sitter_rust()) },
        "scala" => unsafe { Some(tree_sitter_scala()) },
        "sql" => unsafe { Some(tree_sitter_sql()) },
        "svelte" => unsafe { Some(tree_sitter_svelte()) },
        "swift" => unsafe { Some(tree_sitter_swift()) },
        "terraform" => unsafe { Some(tree_sitter_hcl()) },
        "toml" => unsafe { Some(tree_sitter_toml()) },
        "typescript" => unsafe { Some(tree_sitter_tsx()) },
        "vimscript" => unsafe { Some(tree_sitter_vim()) },
        "yaml" => unsafe { Some(tree_sitter_yaml()) },
        "zig" => unsafe { Some(tree_sitter_zig()) },
        _ => None,
    }
}

// extracted from each lang package.json
pub fn config(lang: &str) -> &'static HighlightConfiguration {
    match lang {
        ".bash_profile" => &BASH_CONFIG,
        ".bashrc" => &BASH_CONFIG,
        "GNUmakefile" => &MAKE_CONFIG,
        "Makefile" => &MAKE_CONFIG,
        "app" => &ERLANG_CONFIG,
        "app.src" => &ERLANG_CONFIG,
        "bash" => &BASH_CONFIG,
        "bb" => &CLOJURE_CONFIG,
        "c" => &C_CONFIG,
        "c++" => &CPP_CONFIG,
        "c_sharp" => &CSHARP_CONFIG,
        "cc" => &CPP_CONFIG,
        "cjs" => &JAVASCRIPT_CONFIG,
        "clj" => &CLOJURE_CONFIG,
        "cljc" => &CLOJURE_CONFIG,
        "cljs" => &CLOJURE_CONFIG,
        "clojure" => &CLOJURE_CONFIG,
        "container" => &DOCKERFILE_CONFIG,
        "containerfile" => &DOCKERFILE_CONFIG,
        "cpp" => &CPP_CONFIG,
        "cs" => &CSHARP_CONFIG,
        "csharp" => &CSHARP_CONFIG,
        "css" => &CSS_CONFIG,
        "cxx" => &CPP_CONFIG,
        "diff" => &DIFF_CONFIG,
        "docker" => &DOCKERFILE_CONFIG,
        "dockerfile" => &DOCKERFILE_CONFIG,
        "dsp" => &MAKE_CONFIG,
        "ebuild" => &BASH_CONFIG,
        "eclass" => &BASH_CONFIG,
        "eex" => &EEX_CONFIG,
        "el" => &ELISP_CONFIG,
        "elisp" => &ELISP_CONFIG,
        "elixir" => &ELIXIR_CONFIG,
        "elm" => &ELM_CONFIG,
        "ember" => &EMBER_CONFIG,
        "erl" => &ERLANG_CONFIG,
        "erlang" => &ERLANG_CONFIG,
        "escript" => &ERLANG_CONFIG,
        "ex" => &ELIXIR_CONFIG,
        "exs" => &ELIXIR_CONFIG,
        "gleam" => &GLEAM_CONFIG,
        "glimmer" => &EMBER_CONFIG,
        "go" => &GO_CONFIG,
        "h" => &CPP_CONFIG,
        "handlebars" => &EMBER_CONFIG,
        "haskell" => &HASKELL_CONFIG,
        "hbs" => &EMBER_CONFIG,
        "hcl" => &TERRAFORM_CONFIG,
        "heex" => &HEEX_CONFIG,
        "hpp" => &CPP_CONFIG,
        "hrl" => &ERLANG_CONFIG,
        "hs" => &HASKELL_CONFIG,
        "hs-boot" => &HASKELL_CONFIG,
        "html" => &HTML_CONFIG,
        "html.handlebars" => &EMBER_CONFIG,
        "hxx" => &CPP_CONFIG,
        "iex" => &IEX_CONFIG,
        "java" => &JAVA_CONFIG,
        "javascript" => &JAVASCRIPT_CONFIG,
        "js" => &JAVASCRIPT_CONFIG,
        "jsdoc" => &JSDOC_CONFIG,
        "json" => &JSON_CONFIG,
        "jsx" => &JSX_CONFIG,
        "kotlin" => &KOTLIN_CONFIG,
        "kt" => &KOTLIN_CONFIG,
        "kts" => &KOTLIN_CONFIG,
        "ll" => &LLVM_CONFIG,
        "llvm" => &LLVM_CONFIG,
        "lua" => &LUA_CONFIG,
        "m" => &OBJC_CONFIG,
        "mak" => &MAKE_CONFIG,
        "make" => &MAKE_CONFIG,
        "markdown" => &MARKDOWN_CONFIG,
        "markdown_inline" => &MARKDOWN_INLINE_CONFIG,
        "md" => &MARKDOWN_CONFIG,
        "mjs" => &JAVASCRIPT_CONFIG,
        "mk" => &MAKE_CONFIG,
        "ml" => &PROTO_CONFIG,
        "neex" => &HEEX_CONFIG,
        "objc" => &OBJC_CONFIG,
        "php" => &PHP_CONFIG,
        "plain" => &PLAINTEXT_CONFIG,
        "plaintext" => &PLAINTEXT_CONFIG,
        "proto" => &PROTO_CONFIG,
        "py" => &PYTHON_CONFIG,
        "python" => &PYTHON_CONFIG,
        "r" => &R_CONFIG,
        "rb" => &RUBY_CONFIG,
        "rebar.config" => &ERLANG_CONFIG,
        "regex" => &REGEX_CONFIG,
        "rs" => &RUST_CONFIG,
        "ruby" => &RUBY_CONFIG,
        "rust" => &RUST_CONFIG,
        "sbt" => &SCALA_CONFIG,
        "scala" => &SCALA_CONFIG,
        "sh" => &BASH_CONFIG,
        "sql" => &SQL_CONFIG,
        "svelte" => &SVELTE_CONFIG,
        "swift" => &SWIFT_CONFIG,
        "terraform" => &TERRAFORM_CONFIG,
        "text" => &PLAINTEXT_CONFIG,
        "tf" => &TERRAFORM_CONFIG,
        "tfvars" => &TERRAFORM_CONFIG,
        "toml" => &TOML_CONFIG,
        "ts" => &TYPESCRIPT_CONFIG,
        "txt" => &PLAINTEXT_CONFIG,
        "typescript" => &TYPESCRIPT_CONFIG,
        "vim" => &VIMSCRIPT_CONFIG,
        "viml" => &VIMSCRIPT_CONFIG,
        "vimscript" => &VIMSCRIPT_CONFIG,
        "yaml" => &YAML_CONFIG,
        "zig" => &ZIG_CONFIG,

        _ => &PLAINTEXT_CONFIG,
    }
}

static BASH_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_bash() },
        "bash",
        &download_query("bash", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create bash highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static C_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_c() },
        "c",
        &download_query("c", "highlights.scm").unwrap_or("".to_string()),
        &download_query("c", "injections.scm").unwrap_or("".to_string()),
        "",
    )
    .expect("failed to create c highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static CLOJURE_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_clojure() },
        "clojure",
        include_str!("../../../tmp/langs/clojure/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create clojure highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static CPP_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_cpp() },
        "cpp",
        &download_query("cpp", "highlights.scm").unwrap_or("".to_string()),
        &download_query("cpp", "injections.scm").unwrap_or("".to_string()),
        "",
    )
    .expect("failed to create cpp highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static CSHARP_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_c_sharp() },
        "csharp",
        include_str!("../../../tmp/langs/csharp/queries/highlights.scm"),
        include_str!("../../../tmp/langs/csharp/queries/injections.scm"),
        "",
    )
    .expect("failed to create csharp highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static CSS_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_css() },
        "css",
        &download_query("css", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create css highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static DIFF_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_diff() },
        "diff",
        &download_query("diff", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create diff highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static DOCKERFILE_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_dockerfile() },
        "dockerfile",
        include_str!("../../../tmp/langs/dockerfile/queries/highlights.scm"),
        include_str!("../../../tmp/langs/dockerfile/queries/injections.scm"),
        "",
    )
    .expect("failed to create dockerfile highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static EEX_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_eex() },
        "eex",
        include_str!("../../../tmp/langs/eex/queries/highlights.scm"),
        include_str!("../../../tmp/langs/eex/queries/injections.scm"),
        "",
    )
    .expect("failed to create eex highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static ELISP_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_elisp() },
        "elisp",
        include_str!("../../../tmp/langs/elisp/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create elisp highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static ELIXIR_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_elixir() },
        "elixir",
        include_str!("../../../tmp/langs/elixir/queries/highlights.scm"),
        include_str!("../../../tmp/langs/elixir/queries/injections.scm"),
        "",
    )
    .expect("failed to create elixir highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static ELM_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_elm() },
        "elm",
        include_str!("../../../tmp/langs/elm/queries/highlights.scm"),
        include_str!("../../../tmp/langs/elm/queries/injections.scm"),
        include_str!("../../../tmp/langs/elm/queries/locals.scm"),
    )
    .expect("failed to create elm highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static EMBER_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_glimmer() },
        "ember",
        include_str!("../../../tmp/langs/ember/queries/highlights.scm"),
        "",
        include_str!("../../../tmp/langs/ember/queries/locals.scm"),
    )
    .expect("failed to create ember highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static ERLANG_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_erlang() },
        "erlang",
        include_str!("../../../tmp/langs/erlang/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create erlang highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static GLEAM_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_gleam() },
        "gleam",
        include_str!("../../../tmp/langs/gleam/queries/highlights.scm"),
        "",
        include_str!("../../../tmp/langs/gleam/queries/locals.scm"),
    )
    .expect("failed to create gleam highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static GO_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_go() },
        "go",
        &download_query("go", "highlights.scm").unwrap_or("".to_string()),
        &download_query("go", "injections.scm").unwrap_or("".to_string()),
        "",
    )
    .expect("failed to create go highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static HASKELL_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_haskell() },
        "haskell",
        include_str!("../../../tmp/langs/haskell/queries/highlights.scm"),
        "",
        include_str!("../../../tmp/langs/haskell/queries/locals.scm"),
    )
    .expect("failed to create haskell highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static HEEX_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_heex() },
        "heex",
        include_str!("../../../tmp/langs/heex/queries/highlights.scm"),
        include_str!("../../../tmp/langs/heex/queries/injections.scm"),
        "",
    )
    .expect("failed to create heex highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static HTML_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_html() },
        "html",
        include_str!("../../../tmp/langs/html/queries/highlights.scm"),
        include_str!("../../../tmp/langs/html/queries/injections.scm"),
        "",
    )
    .expect("failed to create html highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static IEX_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_iex() },
        "iex",
        include_str!("../../../tmp/langs/iex/queries/highlights.scm"),
        include_str!("../../../tmp/langs/iex/queries/injections.scm"),
        "",
    )
    .expect("failed to create iex highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static JAVA_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_java() },
        "java",
        include_str!("../../../tmp/langs/java/queries/highlights.scm"),
        include_str!("../../../tmp/langs/java/queries/injections.scm"),
        include_str!("../../../tmp/langs/java/queries/locals.scm"),
    )
    .expect("failed to create java highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static JAVASCRIPT_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_javascript() },
        "javascript",
        include_str!("../../../tmp/langs/javascript/queries/highlights.scm"),
        include_str!("../../../tmp/langs/javascript/queries/injections.scm"),
        include_str!("../../../tmp/langs/javascript/queries/locals.scm"),
    )
    .expect("failed to create javascript highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static JSDOC_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_jsdoc() },
        "jsdoc",
        &download_query("jsdoc", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create jsdoc highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static JSON_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_json() },
        "json",
        &download_query("json", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create json highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static JSX_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_javascript() },
        "jsx",
        include_str!("../../../tmp/langs/jsx/queries/highlights-jsx.scm"),
        "",
        "",
    )
    .expect("failed to create jsx highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static KOTLIN_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_kotlin() },
        "kotlin",
        include_str!("../../../tmp/langs/kotlin/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create kotlin highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static LLVM_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_llvm() },
        "llvm",
        include_str!("../../../tmp/langs/llvm/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create llvm highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static LUA_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_lua() },
        "lua",
        include_str!("../../../tmp/langs/lua/queries/highlights.scm"),
        include_str!("../../../tmp/langs/lua/queries/injections.scm"),
        include_str!("../../../tmp/langs/lua/queries/locals.scm"),
    )
    .expect("failed to create lua highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static MAKE_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_make() },
        "make",
        include_str!("../../../tmp/langs/make/queries/highlights.scm"),
        include_str!("../../../tmp/langs/make/queries/injections.scm"),
        "",
    )
    .expect("failed to create make highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static MARKDOWN_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_markdown() },
        "markdown",
        &download_query("markdown", "highlights.scm").unwrap_or("".to_string()),
        &download_query("markdown", "injections.scm").unwrap_or("".to_string()),
        "",
    )
    .expect("failed to create markdown highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static MARKDOWN_INLINE_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_markdown_inline() },
        "markdown_inline",
        "",
        "",
        "",
    )
    .expect("failed to create markdown_inline highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static OBJC_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_objc() },
        "objc",
        include_str!("../../../tmp/langs/objc/queries/highlights.scm"),
        include_str!("../../../tmp/langs/objc/queries/injections.scm"),
        include_str!("../../../tmp/langs/objc/queries/locals.scm"),
    )
    .expect("failed to create objc highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static PHP_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_php() },
        "php",
        include_str!("../../../tmp/langs/php/queries/highlights.scm"),
        include_str!("../../../tmp/langs/php/queries/injections.scm"),
        "",
    )
    .expect("failed to create php highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static PLAINTEXT_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_diff() },
        "plaintext",
        include_str!("../../../tmp/langs/plaintext/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create plaintext highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static PROTO_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_proto() },
        "proto",
        include_str!("../../../tmp/langs/proto/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create proto highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static PYTHON_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_python() },
        "python",
        &download_query("python", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create python highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static R_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_r() },
        "r",
        include_str!("../../../tmp/langs/r/queries/highlights.scm"),
        include_str!("../../../tmp/langs/r/queries/injections.scm"),
        include_str!("../../../tmp/langs/r/queries/locals.scm"),
    )
    .expect("failed to create r highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static REGEX_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_regex() },
        "regex",
        &download_query("regex", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create regex highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static RUBY_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_ruby() },
        "ruby",
        include_str!("../../../tmp/langs/ruby/queries/highlights.scm"),
        include_str!("../../../tmp/langs/ruby/queries/injections.scm"),
        include_str!("../../../tmp/langs/ruby/queries/locals.scm"),
    )
    .expect("failed to create ruby highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static RUST_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_rust() },
        "rust",
        &download_query("rust", "highlights.scm").unwrap_or("".to_string()),
        &download_query("rust", "injections.scm").unwrap_or("".to_string()),
        "",
    )
    .expect("failed to create rust highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static SCALA_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_scala() },
        "scala",
        include_str!("../../../tmp/langs/scala/queries/highlights.scm"),
        include_str!("../../../tmp/langs/scala/queries/injections.scm"),
        include_str!("../../../tmp/langs/scala/queries/locals.scm"),
    )
    .expect("failed to create scala highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static SQL_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_sql() },
        "sql",
        include_str!("../../../tmp/langs/sql/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create sql highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static SVELTE_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_svelte() },
        "svelte",
        include_str!("../../../tmp/langs/svelte/queries/highlights.scm"),
        include_str!("../../../tmp/langs/svelte/queries/injections.scm"),
        include_str!("../../../tmp/langs/svelte/queries/locals.scm"),
    )
    .expect("failed to create svelte highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static SWIFT_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_swift() },
        "swift",
        include_str!("../../../tmp/langs/swift/queries/highlights.scm"),
        include_str!("../../../tmp/langs/swift/queries/injections.scm"),
        include_str!("../../../tmp/langs/swift/queries/locals.scm"),
    )
    .expect("failed to create swift highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static TERRAFORM_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_hcl() },
        "terraform",
        include_str!("../../../tmp/langs/terraform/queries/highlights.scm"),
        include_str!("../../../tmp/langs/terraform/queries/injections.scm"),
        "",
    )
    .expect("failed to create terraform highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static TOML_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_toml() },
        "toml",
        include_str!("../../../tmp/langs/toml/queries/highlights.scm"),
        "",
        "",
    )
    .expect("failed to create toml highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static TYPESCRIPT_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_tsx() },
        "typescript",
        &download_query("typescript", "highlights.scm").unwrap_or("".to_string()),
        &download_query("typescript", "injections.scm").unwrap_or("".to_string()),
        include_str!("../../../tmp/langs/typescript/queries/locals.scm"),
    )
    .expect("failed to create typescript highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static VIMSCRIPT_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_vim() },
        "vimscript",
        include_str!("../../../tmp/langs/vimscript/queries/highlights.scm"),
        include_str!("../../../tmp/langs/vimscript/queries/injections.scm"),
        "",
    )
    .expect("failed to create vimscript highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static YAML_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_yaml() },
        "yaml",
        &download_query("yaml", "highlights.scm").unwrap_or("".to_string()),
        "",
        "",
    )
    .expect("failed to create yaml highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

static ZIG_CONFIG: LazyLock<HighlightConfiguration> = LazyLock::new(|| {
    let mut config = HighlightConfiguration::new(
        unsafe { tree_sitter_zig() },
        "zig",
        include_str!("../../../tmp/langs/zig/queries/highlights.scm"),
        include_str!("../../../tmp/langs/zig/queries/injections.scm"),
        "",
    )
    .expect("failed to create zig highlight configuration");
    config.configure(&HIGHLIGHT_NAMES);
    config
});

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_bash() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_bash() })
            .expect("failed to set language bash");
        parser.parse(b"test", None).expect("failed to parse bash");
    }

    #[test]
    fn test_c() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_c() })
            .expect("failed to set language c");
        parser.parse(b"test", None).expect("failed to parse c");
    }

    #[test]
    fn test_clojure() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_clojure() })
            .expect("failed to set language clojure");
        parser
            .parse(b"test", None)
            .expect("failed to parse clojure");
    }

    #[test]
    fn test_cpp() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_cpp() })
            .expect("failed to set language cpp");
        parser.parse(b"test", None).expect("failed to parse cpp");
    }

    #[test]
    fn test_csharp() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_c_sharp() })
            .expect("failed to set language csharp");
        parser.parse(b"test", None).expect("failed to parse csharp");
    }

    #[test]
    fn test_css() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_css() })
            .expect("failed to set language css");
        parser.parse(b"test", None).expect("failed to parse css");
    }

    #[test]
    fn test_diff() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_diff() })
            .expect("failed to set language diff");
        parser.parse(b"test", None).expect("failed to parse diff");
    }

    #[test]
    fn test_dockerfile() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_dockerfile() })
            .expect("failed to set language dockerfile");
        parser
            .parse(b"test", None)
            .expect("failed to parse dockerfile");
    }

    #[test]
    fn test_eex() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_eex() })
            .expect("failed to set language eex");
        parser.parse(b"test", None).expect("failed to parse eex");
    }

    #[test]
    fn test_elisp() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_elisp() })
            .expect("failed to set language elisp");
        parser.parse(b"test", None).expect("failed to parse elisp");
    }

    #[test]
    fn test_elixir() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_elixir() })
            .expect("failed to set language elixir");
        parser.parse(b"test", None).expect("failed to parse elixir");
    }

    #[test]
    fn test_elm() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_elm() })
            .expect("failed to set language elm");
        parser.parse(b"test", None).expect("failed to parse elm");
    }

    #[test]
    fn test_ember() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_glimmer() })
            .expect("failed to set language ember");
        parser.parse(b"test", None).expect("failed to parse ember");
    }

    #[test]
    fn test_erlang() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_erlang() })
            .expect("failed to set language erlang");
        parser.parse(b"test", None).expect("failed to parse erlang");
    }

    #[test]
    fn test_gleam() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_gleam() })
            .expect("failed to set language gleam");
        parser.parse(b"test", None).expect("failed to parse gleam");
    }

    #[test]
    fn test_go() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_go() })
            .expect("failed to set language go");
        parser.parse(b"test", None).expect("failed to parse go");
    }

    #[test]
    fn test_haskell() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_haskell() })
            .expect("failed to set language haskell");
        parser
            .parse(b"test", None)
            .expect("failed to parse haskell");
    }

    #[test]
    fn test_heex() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_heex() })
            .expect("failed to set language heex");
        parser.parse(b"test", None).expect("failed to parse heex");
    }

    #[test]
    fn test_html() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_html() })
            .expect("failed to set language html");
        parser.parse(b"test", None).expect("failed to parse html");
    }

    #[test]
    fn test_iex() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_iex() })
            .expect("failed to set language iex");
        parser.parse(b"test", None).expect("failed to parse iex");
    }

    #[test]
    fn test_java() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_java() })
            .expect("failed to set language java");
        parser.parse(b"test", None).expect("failed to parse java");
    }

    #[test]
    fn test_javascript() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_javascript() })
            .expect("failed to set language javascript");
        parser
            .parse(b"test", None)
            .expect("failed to parse javascript");
    }

    #[test]
    fn test_jsdoc() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_jsdoc() })
            .expect("failed to set language jsdoc");
        parser.parse(b"test", None).expect("failed to parse jsdoc");
    }

    #[test]
    fn test_json() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_json() })
            .expect("failed to set language json");
        parser.parse(b"test", None).expect("failed to parse json");
    }

    #[test]
    fn test_jsx() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_javascript() })
            .expect("failed to set language jsx");
        parser.parse(b"test", None).expect("failed to parse jsx");
    }

    #[test]
    fn test_kotlin() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_kotlin() })
            .expect("failed to set language kotlin");
        parser.parse(b"test", None).expect("failed to parse kotlin");
    }

    #[test]
    fn test_llvm() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_llvm() })
            .expect("failed to set language llvm");
        parser.parse(b"test", None).expect("failed to parse llvm");
    }

    #[test]
    fn test_lua() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_lua() })
            .expect("failed to set language lua");
        parser.parse(b"test", None).expect("failed to parse lua");
    }

    #[test]
    fn test_make() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_make() })
            .expect("failed to set language make");
        parser.parse(b"test", None).expect("failed to parse make");
    }

    #[test]
    fn test_markdown() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_markdown() })
            .expect("failed to set language markdown");
        parser
            .parse(b"test", None)
            .expect("failed to parse markdown");
    }

    #[test]
    fn test_markdown_inline() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_markdown_inline() })
            .expect("failed to set language markdown_inline");
        parser
            .parse(b"test", None)
            .expect("failed to parse markdown_inline");
    }

    #[test]
    fn test_objc() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_objc() })
            .expect("failed to set language objc");
        parser.parse(b"test", None).expect("failed to parse objc");
    }

    #[test]
    fn test_php() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_php() })
            .expect("failed to set language php");
        parser.parse(b"test", None).expect("failed to parse php");
    }

    #[test]
    fn test_plaintext() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_diff() })
            .expect("failed to set language plaintext");
        parser
            .parse(b"test", None)
            .expect("failed to parse plaintext");
    }

    #[test]
    fn test_proto() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_proto() })
            .expect("failed to set language proto");
        parser.parse(b"test", None).expect("failed to parse proto");
    }

    #[test]
    fn test_python() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_python() })
            .expect("failed to set language python");
        parser.parse(b"test", None).expect("failed to parse python");
    }

    #[test]
    fn test_r() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_r() })
            .expect("failed to set language r");
        parser.parse(b"test", None).expect("failed to parse r");
    }

    #[test]
    fn test_regex() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_regex() })
            .expect("failed to set language regex");
        parser.parse(b"test", None).expect("failed to parse regex");
    }

    #[test]
    fn test_ruby() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_ruby() })
            .expect("failed to set language ruby");
        parser.parse(b"test", None).expect("failed to parse ruby");
    }

    #[test]
    fn test_rust() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_rust() })
            .expect("failed to set language rust");
        parser.parse(b"test", None).expect("failed to parse rust");
    }

    #[test]
    fn test_scala() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_scala() })
            .expect("failed to set language scala");
        parser.parse(b"test", None).expect("failed to parse scala");
    }

    #[test]
    fn test_sql() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_sql() })
            .expect("failed to set language sql");
        parser.parse(b"test", None).expect("failed to parse sql");
    }

    #[test]
    fn test_svelte() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_svelte() })
            .expect("failed to set language svelte");
        parser.parse(b"test", None).expect("failed to parse svelte");
    }

    #[test]
    fn test_swift() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_swift() })
            .expect("failed to set language swift");
        parser.parse(b"test", None).expect("failed to parse swift");
    }

    #[test]
    fn test_terraform() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_hcl() })
            .expect("failed to set language terraform");
        parser
            .parse(b"test", None)
            .expect("failed to parse terraform");
    }

    #[test]
    fn test_toml() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_toml() })
            .expect("failed to set language toml");
        parser.parse(b"test", None).expect("failed to parse toml");
    }

    #[test]
    fn test_typescript() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_tsx() })
            .expect("failed to set language typescript");
        parser
            .parse(b"test", None)
            .expect("failed to parse typescript");
    }

    #[test]
    fn test_vimscript() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_vim() })
            .expect("failed to set language vimscript");
        parser
            .parse(b"test", None)
            .expect("failed to parse vimscript");
    }

    #[test]
    fn test_yaml() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_yaml() })
            .expect("failed to set language yaml");
        parser.parse(b"test", None).expect("failed to parse yaml");
    }

    #[test]
    fn test_zig() {
        let mut parser = tree_sitter::Parser::new();
        parser
            .set_language(unsafe { &tree_sitter_zig() })
            .expect("failed to set language zig");
        parser.parse(b"test", None).expect("failed to parse zig");
    }
}
